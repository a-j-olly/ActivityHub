#!/usr/bin/env python
"""
This script creates the necessary DynamoDB table for local testing.
Before running this script, make sure DynamoDB Local is running.

Example to start DynamoDB Local:
java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb -port 8000

For more information on DynamoDB Local, see:
https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html
"""

import boto3
import time
import os
import sys

# Add parent directory to path to import from config.py
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Local DynamoDB endpoint
endpoint_url = 'http://localhost:8000'
region = 'us-west-2'
table_name = 'ActivityHub-local'

def create_table(dynamodb):
    print(f"Creating table: {table_name}")
    
    try:
        table = dynamodb.create_table(
            TableName=table_name,
            KeySchema=[
                {'AttributeName': 'PK', 'KeyType': 'HASH'},  # Partition key
                {'AttributeName': 'SK', 'KeyType': 'RANGE'}   # Sort key
            ],
            AttributeDefinitions=[
                {'AttributeName': 'PK', 'AttributeType': 'S'},
                {'AttributeName': 'SK', 'AttributeType': 'S'},
                {'AttributeName': 'EntityType', 'AttributeType': 'S'},
                {'AttributeName': 'GSI1PK', 'AttributeType': 'S'},
                {'AttributeName': 'GSI1SK', 'AttributeType': 'S'}
            ],
            GlobalSecondaryIndexes=[
                {
                    'IndexName': 'EntityTypeIndex',
                    'KeySchema': [
                        {'AttributeName': 'EntityType', 'KeyType': 'HASH'},
                        {'AttributeName': 'SK', 'KeyType': 'RANGE'}
                    ],
                    'Projection': {
                        'ProjectionType': 'ALL'
                    },
                    'ProvisionedThroughput': {
                        'ReadCapacityUnits': 5,
                        'WriteCapacityUnits': 5
                    }
                },
                {
                    'IndexName': 'GSI1',
                    'KeySchema': [
                        {'AttributeName': 'GSI1PK', 'KeyType': 'HASH'},
                        {'AttributeName': 'GSI1SK', 'KeyType': 'RANGE'}
                    ],
                    'Projection': {
                        'ProjectionType': 'ALL'
                    },
                    'ProvisionedThroughput': {
                        'ReadCapacityUnits': 5,
                        'WriteCapacityUnits': 5
                    }
                }
            ],
            ProvisionedThroughput={
                'ReadCapacityUnits': 5,
                'WriteCapacityUnits': 5
            }
        )
        
        # Wait for the table to be created
        print(f"Waiting for table {table_name} to be created...")
        table.meta.client.get_waiter('table_exists').wait(TableName=table_name)
        print(f"Table {table_name} created successfully!")
        
        return table
    except Exception as e:
        if 'ResourceInUseException' in str(e):
            print(f"Table {table_name} already exists.")
            return dynamodb.Table(table_name)
        else:
            print(f"Error creating table: {str(e)}")
            raise

def main():
    # Connect to local DynamoDB
    print(f"Connecting to DynamoDB at {endpoint_url}")
    dynamodb = boto3.resource('dynamodb', region_name=region, endpoint_url=endpoint_url)
    
    # Create the table
    table = create_table(dynamodb)
    
    # List all tables to confirm
    client = boto3.client('dynamodb', region_name=region, endpoint_url=endpoint_url)
    tables = client.list_tables()
    print(f"Available tables: {tables['TableNames']}")
    
    # Display environment variables to set
    print("\nTo use this local table, set the following environment variables:")
    print(f"export DYNAMODB_TABLE={table_name}")
    print(f"export DYNAMODB_ENDPOINT_URL={endpoint_url}")
    print(f"export AWS_REGION={region}")
    
    return table

if __name__ == '__main__':
    main()